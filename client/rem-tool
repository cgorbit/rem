#!/usr/bin/env python

import os
import sys
import time
import optparse
import ConfigParser
import json
import re
import datetime

import remclient

USE_COLOR = False
TIMESTAMP_RE = re.compile('(?:[^0-9]|^)(1\d{9})(?:[^0-9]|$)')
USE_NEW_OUTPUT_FORMAT = False

class ICommander(object):
    def __init__(self, opt, action):
        self.type = action
        self.options = opt

    def __enter__(self):
        self.conn = remclient.Connector(self.options.url, conn_retries=2, verbose=True)
        self.conn.__enter__()
        return self

    def __exit__(self, *args):
        return self.conn.__exit__(*args)


class EFormat(object):
    Bold = 1
    Italic = 3

class EColor(object):
    Black = 30
    Green = 32
    Red = 31
    Blue = 34
    Yellow = 33


def color_if_need(o, color, format=None):
    if not USE_COLOR or color == EColor.Black and format is None:
        return str(o)
    return '\033[%02d;%02dm%s\033[00m' % (format if format is not None else 0, color, o)


def get_pck_name_time_descr(name):
    m = TIMESTAMP_RE.search(name)
    if not m:
        return ''
    t = datetime.datetime.fromtimestamp(int(m.groups()[0]))
    return t.isoformat()

def produce_dep_tags_str(pck, show_all):
    all_tags = sorted(pck.all_tags if show_all else pck.wait)

    if not USE_COLOR:
        return '[' + ', '.join(all_tags) + ']'

    set_tags = set(all_tags) - set(pck.wait)

    return '[' + \
        ', '.join([
            color_if_need(tag, EColor.Black if tag in set_tags else EColor.Blue)
                for tag in all_tags
        ]) \
        + ']'

def print_pck_info(pck, extended=False, show_all_tags=False, depth=0, max_depth=0,
                   print_history=False):
    workTime = pck.GetWorkingTime()
    color_by_state = {
        'SUCCESSFULL': EColor.Green,
        'ERROR': EColor.Red,
        'WAITING': EColor.Red,
        'WORKABLE': EColor.Yellow,
        'PENDING': EColor.Yellow,
        'SUSPENDED': EColor.Blue,
    }

    state_color = color_by_state.get(pck.state, EColor.Black)

    def color_by_state_if_need(o, format=None):
        return color_if_need(o, state_color, format)

    last_sandbox_task_id = getattr(pck, 'last_sandbox_task_id', None)
    is_sandbox = getattr(pck, 'is_sandbox', False)

    time_descr = get_pck_name_time_descr(pck.name)

    history_mtime = datetime.datetime.fromtimestamp(int(pck.history[-1][1])) if pck.history else None

    notify_emails = getattr(pck, 'notify_emails', None)
    info_fields = dict(
        pck_id=color_if_need(pck.pck_id, EColor.Black, EFormat.Bold),
        pck_name=color_if_need(pck.name, EColor.Black, EFormat.Bold),
        pck_state_old=color_if_need(pck.state, state_color),
        pck_state_new=getattr(pck, 'extended_state', ['IS_-'])[0][3:],
        time_from_pck_name=color_if_need(time_descr, EColor.Black, EFormat.Italic),
        dep_tags=produce_dep_tags_str(pck, show_all_tags),
        pck_priority=pck.priority,
        working_time=color_if_need(workTime, EColor.Yellow),
        done_tag=pck.result_tag,
        history_mtime_old=(history_mtime.strftime('%Y/%m/%d-%H:%M:%S') if history_mtime else None),
        history_mtime=(history_mtime.isoformat() if history_mtime else None),
        notify_emails=notify_emails,
        notify_emails_short=[email[:-15] if email.endswith('@yandex-team.ru') else email for email in (notify_emails or [])],
        is_sandbox=(color_if_need(is_sandbox, EColor.Red, EFormat.Italic) if is_sandbox else is_sandbox),
        last_sandbox_task_id=last_sandbox_task_id,
        user_labels=(getattr(pck, 'labels', []) or []),
        queue=getattr(pck, 'queue', None),
    )

    if USE_NEW_OUTPUT_FORMAT:
        format = "{pck_id}  {pck_state_old}/{pck_state_new}  {pck_name}  {time_from_pck_name}" \
            "  wait={dep_tags},priority={pck_priority};working_time={working_time}" \
            ";result_tag={done_tag};last_update='{history_mtime}'" \
            ";notify_emails={notify_emails_short};is_sandbox={is_sandbox};" \
            "last_sandbox_task={last_sandbox_task_id};labels={user_labels},queue={queue}"
    else:
        format = "packet '{pck_id}':\tname={pck_name},state={pck_state_old};wait={dep_tags}" \
            ",priority={pck_priority};working_time={working_time}" \
            ";result_tag={done_tag};last_update='{history_mtime_old}'" \
            ";notify_emails={notify_emails};is_sandbox={is_sandbox}" \
            ";last_sandbox_task={last_sandbox_task_id},labels={user_labels}"

    if depth:
        format = ('    ' * depth) + format

    print format.format(**info_fields)

    def color_job_command(cmd):
        return color_if_need(cmd, EColor.Black, EFormat.Bold)

    if not USE_NEW_OUTPUT_FORMAT:
        for job in pck.jobs:
            if job.state == "working":
                print "%sexec_shell=%s" % (
                    " " * len(pck.pck_id),
                    color_job_command(job.shell.encode('utf-8')),
                )

    if extended:
        last_error = getattr(pck, 'last_global_error', None)
        if last_error:
            print "\nError: %s" % last_error

        resolved_releases = getattr(pck, 'resolved_releases', None)
        if resolved_releases:
            print "\nResolved resources:"
            for descr in sorted(resolved_releases.keys()):
                print "\t%s: %s" % (descr, resolved_releases[descr])

        if last_sandbox_task_id is not None:
            print '\nSandbox url: https://sandbox.yandex-team.ru/task/%d/view' % last_sandbox_task_id

        #print '\nHistory:'
        if USE_NEW_OUTPUT_FORMAT:
            print
        for status, tstamp in pck.history:
            print "\t[%s] %s" % (time.ctime(tstamp), status)

        color_by_job_state = {
            'done': EColor.Green,
            'errored': EColor.Red,
            'working': EColor.Yellow,
            'pending': EColor.Yellow,
            'suspended': EColor.Blue,
        }

        for job in pck.jobs:
            results_joined =  "\n".join(i.data for i in job.results)
            matches = re.findall(r'\bstarted: (\d{4}/\d\d/\d\d \d\d:\d\d:\d\d)', results_joined)
            job.last_start_time = int(datetime.datetime.strptime(matches[-1], '%Y/%m/%d %H:%M:%S').strftime('%s')) \
                if matches else None

        for job in sorted(pck.jobs, key=lambda j: j.last_start_time):
            job_state_color = color_by_job_state.get(job.state, EColor.Black)

            fields = dict(
                descr=job.desc,
                id=color_if_need(job.id, job_state_color),
                command=color_job_command(job.shell.encode('utf-8')),
            )

            format = "\n[{id}]\t{command}" \
                if USE_NEW_OUTPUT_FORMAT \
                else "[SUBJOB {descr}] id: {id},\tshell: {command}"

            print format.format(**fields)

            if not getattr(job, 'wait_jobs', None):
                print color_if_need(job.state, job_state_color)
            else:
                print "%s (waiting for jobs: %s)" % (job.state, ', '.join(str(j.id) for j in job.wait_jobs))
            print "\n".join(i.data.replace("\n", "\n\t") for i in job.results)

    elif print_history:
        for status, tstamp in pck.history:
            print "\t[%s] %s" % (time.ctime(tstamp), status)

    # XXX jobs' set_tag's not accounted
    if depth < max_depth and pck.result_tag:
        rem = pck.conn
        for pck_id in rem.Tag(pck.result_tag).ListDependentPackets():
            print_pck_info(
                rem.PacketInfo(pck_id),
                extended=extended,
                show_all_tags=show_all_tags,
                depth=depth + 1,
                max_depth=max_depth,
            )


class CommandExecutionError(Exception): pass


def list_queue_packets(rem, opts):
    q = rem.Queue(opts.queue)
    return q.ListPackets(
        opts.filter,
        opts.name,
        opts.prefix,
        opts.min_mtime,
        opts.max_mtime,
        opts.min_ctime,
        opts.max_ctime,
        opts.labels
    )


class ListCommander(ICommander):
    def __call__(self):
        opts = self.options
        rem = self.conn

        if self.options.queue:
            pckList = list_queue_packets(rem, opts)
            remclient.JobPacketInfo.multiupdate(pckList)
            for pck in sorted(pckList, key=lambda p : p.name):
                print_pck_info(pck, show_all_tags=self.options.show_all_dep_tags)

        elif self.options.list_tags:
            for tag, value in sorted(self.conn.ListObjects("tags", self.options.name, self.options.prefix)):
                print ("+" if value else "-"), tag

        elif self.options.list_all_tags:
            for tag, value in sorted(self.conn.ListObjects("tags", self.options.name, self.options.prefix, False)):
                print ("+" if value else "-"), tag

        elif opts.tag:
            for pck_id in rem.Tag(opts.tag).ListDependentPackets():
                print_pck_info(
                    rem.PacketInfo(pck_id),
                    extended=False,
                    show_all_tags=opts.show_all_dep_tags,
                    max_depth=opts.recurse_depth,
                )

        else:
            for q, q_stat in self.conn.ListObjects("queues", self.options.name, self.options.prefix):
                print "queue '%s':\t\t%r" % (q, q_stat)


class TagManipCommander(ICommander):
    def __call__(self):
        tagname = self.options.tag
        tag = self.conn.Tag(tagname)
        if self.type == "set":
            tag.Set()
        elif self.type == "unset":
            tag.Unset()
        elif self.type == "reset":
            tag.Reset()


class LifeCommander(ICommander):
    def __call__(self):
        if self.options.packet:
            object = self.conn.PacketInfo(self.options.packet)
        elif self.options.queue:
            object = self.conn.Queue(self.options.queue)
        else:
            raise CommandExecutionError("unknown target for command: %s" % self.type)

        if self.type == "suspend":
            object.Suspend()
        elif self.type == "stop":
            if not isinstance(object, remclient.JobPacketInfo):
                raise CommandExecutionError("only packets may be stopped")
            object.Stop()
        elif self.type == "resume":
            object.Resume()
        elif self.type == "restart":
            if not isinstance(object, remclient.JobPacketInfo):
                raise CommandExecutionError("only packets may be restarted")
            if object.state == 'SUCCESSFULL':
                object.Restart()
            else:
                object.RestartFromErrors()
        elif self.type == "retry":
            if not isinstance(object, remclient.Queue):
                raise CommandExecutionError("retry is only for queue")
            for pack in object.ListPackets("errored"):
                pack.RestartFromErrors()
        elif self.type == "delete":
            if isinstance(object, remclient.Queue):
                self.delete_queue(object, self.conn.GetURL())
            else:
                object.Delete()
        else:
            raise CommandExecutionError("unknown command: %s" % self.type)

    @staticmethod
    def delete_queue(queue, uri):
        pause = 3
        print """\
WARNING!
Going to delete queue "{}" from "{}" in {} seconds:
- stop all packets;
- delete all packets;
- delete queue itself.
""".format(queue.name, uri, pause)
        time.sleep(pause)

        queue.Suspend()
        packets = queue.ListPackets("all")
        for pack in packets:
            if pack.state not in ['ERROR', 'SUCCESSFULL', 'HISTORIED']:
                pack.Stop()
        for pack in packets:
            pack.Delete()
        queue.Delete()
        print 'Queue {} deleted.'.format(queue.name)

class StatusCommander(ICommander):
    def __call__(self):
        opts = self.options
        rem = self.conn

        if opts.queue:
            q = rem.Queue(opts.queue)
            print "queue '%s':\t%r" % (opts.queue, q.Status())

        if opts.packet:
            pck = rem.PacketInfo(opts.packet)

            print_pck_info(
                pck,
                extended=not opts.recurse_depth,
                show_all_tags=opts.show_all_dep_tags,
                max_depth=opts.recurse_depth,
            )

        if opts.tag:
            tag = rem.Tag(opts.tag)
            print "tag %s value: %s" % (tag.name, tag.Check())


class UpdateCommander(ICommander):
    def __call__(self):
        opts = self.options

        if self.options.packet and self.options.files:
            pck_id = self.options.packet
            files = self.options.files
            pck = self.conn.PacketInfo(pck_id)
            pck.AddFiles(files)

        elif self.options.queue and self.options.working_limit:
            queue = self.conn.Queue(self.options.queue)
            limits = opts.working_limit.split(',')
            if len(limits) == 1:
                local_limit = int(limits[0])
                args = [local_limit]
            elif len(limits) == 2:
                local_limit, sandbox_limit = map(int, limits)
                args = [local_limit, sandbox_limit]
            else:
                raise RuntimeError("Malformed working_limit")
            queue.ChangeWorkingLimit(*args)

        else:
            raise CommandExecutionError("not enough parameters for update command")


class MoveCommander(ICommander):
    def __call__(self):
        pck_id = self.options.packet
        src_q, dest_q = self.options.from_to.split(":")
        if not (pck_id and src_q and dest_q):
            raise CommandExecutionError("can't move packet %r from \"%s\" to\"%s\"" % (pck_id, src_q, dest_q))
        pck = self.conn.PacketInfo(pck_id)
        pck.MoveToQueue(src_q, dest_q)


class ResourcesCommander(ICommander):
    def __call__(self):
        opts = self.options
        rem = self.conn

        if opts.packet:
            pck = self.conn.PacketInfo(opts.packet)
            pck.ResolveResources()

        elif opts.queue:
            packets = list_queue_packets(rem, opts)
            remclient.JobPacketInfo.ResolveResourcesBulk(packets)

        else:
            raise CommandExecutionError("not enough parameters for resolve-resources command")


_DISP_COMMANDS = {
    "list":     (ListCommander,     "list rem objects (queues (by default), packets (if --queue set) or tags(if --tags set))"),
    "status":   (StatusCommander,   "print object status (--queue, --packet or --tag have to been set)"),
    "update":   (UpdateCommander,   "update packet data (with --packet and --file) or working limit for queue (with --queue and --working-limit)"),
    "move":     (MoveCommander,     "move packet between queues, see --relloc-path"),
    "suspend":  (LifeCommander,     "suspend object execution (--queue or --packet have to been set)"),
    "resume":   (LifeCommander,     "resume object execution  (--queue or --packet have to been set)"),
    "retry":    (LifeCommander,     "restart all errored packets of queue (requires --queue), see also restart action"),
    "restart":  (LifeCommander,     "restart errored packet (requires --packet), see also retry action"),
    "delete":   (LifeCommander,     "delete object (requires -q (--queue) or -p (--packet))"),
    "stop":     (LifeCommander,     "stop packet execution (suspend and kill all jobs, --packet have to been set)"),
    "set":      (TagManipCommander, "set tag (--tag have to been set)"),
    "unset":    (TagManipCommander, "unset tag (--tag have to been set)"),
    "reset":    (TagManipCommander, "reset tag (--tag have to been set)"),
    "resolve-resources": (ResourcesCommander, "re-resolve Sandbox packet resources"),
}

def rem_url_from_cfg(path):
    cfg = ConfigParser.SafeConfigParser()
    cfg.read(path)
    return 'http://{}:{}/'.format(cfg.get('server', 'network_hostname'), cfg.get('server', 'port'))


def init_color_mode(opt_color_mode):
    class EColorMode(object):
        Disabled = 0
        Enabled  = 1
        Auto     = 2

    color_mode_map = {
        'always':   EColorMode.Enabled,
        'yes':      EColorMode.Enabled,
        'force':    EColorMode.Enabled,

        'never':    EColorMode.Disabled,
        'none':     EColorMode.Disabled,
        'no':       EColorMode.Disabled,

        'auto':     EColorMode.Auto,
        'tty':      EColorMode.Auto,
        'if-tty':   EColorMode.Auto,
    }

    color_mode = color_mode_map.get(opt_color_mode)
    if color_mode is None:
        raise MalformedOption("Bad value for --color")

    global USE_COLOR
    USE_COLOR = bool(
        color_mode == EColorMode.Enabled
        or color_mode == EColorMode.Auto and os.isatty(1))


def parse_args():
    descr = "%prog [options] action\npossible actions:"
    for action in sorted(_DISP_COMMANDS.keys()):
        descr += '\n    {:8} - {}'.format(action, _DISP_COMMANDS[action][1])

    parser = optparse.OptionParser(descr)
    parser.add_option("-u", "--url", help="set REM server url (also REM_TOOL_DEFAULT_SERVER environment variable)")
    parser.add_option('--rem-cfg', help='pathname of REM configuration file')
    parser.add_option("-q", "--queue", dest="queue", help="set target queue name")
    parser.add_option("-p", "--packet", dest="packet", help="set target packet id")
    parser.add_option("-f", "--file", dest="files", action="append", default=[], help="set file for packet updating")
    parser.add_option("-t", "--tag", dest="tag", help="set tag name")
    parser.add_option("--tags", dest="list_tags", action="store_const", const=True, help="list tags, makes sense only with list action")
    parser.add_option("--alltags", dest="list_all_tags", action="store_const", const=True, help="list tags (including tags not in memory), makes sense only with list action")
    parser.add_option("-F", "--filter", dest="filter", default="all", help="set targets filter (for listing packets in queue")
    parser.add_option("-N", "--name", dest="name", help="name regexp for filtering list of tags or packets")
    parser.add_option("-P", "--prefix", dest="prefix", help="name prefix for filtering list of tags or packets")
    parser.add_option("--min-mtime")
    parser.add_option("--max-mtime")
    parser.add_option("--min-ctime")
    parser.add_option("--max-ctime")
    parser.add_option("-R", "--relloc-path", dest="from_to", default=":", help="relocation PATH for moved packet (':'-splitted pair of queues)", metavar="PATH")
    parser.add_option("-W", "--working-limit", dest="working_limit", help="set working limit for queue (format: LOCAL_LIMIT[,SANDBOX_LIMIT])")
    parser.add_option("--all-deps", dest="show_all_dep_tags", action="store_const", const=True, help="Show all tags not only tags to wait")
    parser.add_option("-l", "--labels", dest="labels", action='append', help="")
    parser.add_option("--port", help="")
    parser.add_option("--color", dest='color_mode', default=os.environ.get('REM_TOOL_COLOR_MODE', 'auto'), help="color mode: auto (by default), never, always. Also REM_TOOL_COLOR_MODE environment variable")
    parser.add_option("--new", action='store_true', dest='new_output_format', default=os.environ.get('REM_TOOL_NEW_OUTPUT_FORMAT', 'no').lower() in ['yes', '1'], help="New experimental output format (also REM_TOOL_NEW_OUTPUT_FORMAT environment variable)")
    parser.add_option("--recurse", dest="recurse_depth", type="int", default=0)

    opt, args = parser.parse_args()

    if not args:
        parser.error('need action')

    if len(args) > 1:
        parser.error('only one action at a time')

    action = args[0]
    if not action in _DISP_COMMANDS:
        parser.error('unknown action "{}", use one of: {}'.format(action, ', '.join(sorted(_DISP_COMMANDS.keys()))))

    time_deltas_multipliers = {
        's': 1,
        'm': 60,
        'h': 3600,
        'd': 86400,
    }

    now = int(time.time())
    for opt_name in ['min_ctime', 'max_ctime', 'min_mtime', 'max_mtime']:
        val = getattr(opt, opt_name, None)
        if val is not None:
            if val[-1] in ['s', 'm', 'h', 'd']:
                type = val[-1]
                count = float(val[:-1])
                delta = time_deltas_multipliers[type] * count
                val = now + int(delta)
            else:
                val = int(val)
            setattr(opt, opt_name, val)

    init_color_mode(opt.color_mode)

    global USE_NEW_OUTPUT_FORMAT
    USE_NEW_OUTPUT_FORMAT = opt.new_output_format

    if opt.url and opt.rem_cfg:
        parser.error("options -u (--url) and --rem-cfg are mutually exclusive")

    default_rem_server = os.environ.get('REM_TOOL_DEFAULT_SERVER')

    if opt.url:
        pass
    elif opt.rem_cfg:
        opt.url = rem_url_from_cfg(opt.rem_cfg)
    elif opt.port:
        opt.url = 'http://localhost:%d' % int(opt.port)
    elif default_rem_server:
        opt.url = default_rem_server
    else:
        """
        Leave intact for production.
        For local/testing REM you could use one of "opt.url =" lines in
        order to shorten command line of rem-tool call.
        """
        parser.error('specify -u (--url) or --rem-cfg or --port')

    return opt, action

def main():
    opt, action = parse_args()
    with _DISP_COMMANDS[action][0](opt, action) as commander:
        commander()


if __name__ == "__main__":
    main()
